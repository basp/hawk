//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.12.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from .\Hawk.g4 by ANTLR 4.12.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.12.0")]
public partial class HawkLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		ESC=10, NUM=11, ID=12, TEXT=13, WS=14;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"ESC", "NUM", "ID", "TEXT", "WS"
	};


	public HawkLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public HawkLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "':'", "';'", "'('", "')'", "'['", "']'", "'/'", "'*'", "'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, "ESC", "NUM", 
		"ID", "TEXT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Hawk.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static HawkLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,14,76,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,1,0,1,
		0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,
		1,9,5,9,50,8,9,10,9,12,9,53,9,9,1,9,1,9,1,10,1,10,5,10,59,8,10,10,10,12,
		10,62,9,10,1,11,1,11,1,12,1,12,5,12,68,8,12,10,12,12,12,71,9,12,1,13,1,
		13,1,13,1,13,1,51,0,14,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
		11,23,12,25,13,27,14,1,0,5,1,0,49,57,1,0,48,57,1,0,65,90,1,0,97,122,3,
		0,9,10,13,13,32,32,78,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
		0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,
		0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,1,29,1,0,0,0,
		3,31,1,0,0,0,5,33,1,0,0,0,7,35,1,0,0,0,9,37,1,0,0,0,11,39,1,0,0,0,13,41,
		1,0,0,0,15,43,1,0,0,0,17,45,1,0,0,0,19,47,1,0,0,0,21,56,1,0,0,0,23,63,
		1,0,0,0,25,65,1,0,0,0,27,72,1,0,0,0,29,30,5,58,0,0,30,2,1,0,0,0,31,32,
		5,59,0,0,32,4,1,0,0,0,33,34,5,40,0,0,34,6,1,0,0,0,35,36,5,41,0,0,36,8,
		1,0,0,0,37,38,5,91,0,0,38,10,1,0,0,0,39,40,5,93,0,0,40,12,1,0,0,0,41,42,
		5,47,0,0,42,14,1,0,0,0,43,44,5,42,0,0,44,16,1,0,0,0,45,46,5,94,0,0,46,
		18,1,0,0,0,47,51,5,34,0,0,48,50,9,0,0,0,49,48,1,0,0,0,50,53,1,0,0,0,51,
		52,1,0,0,0,51,49,1,0,0,0,52,54,1,0,0,0,53,51,1,0,0,0,54,55,5,34,0,0,55,
		20,1,0,0,0,56,60,7,0,0,0,57,59,7,1,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,
		58,1,0,0,0,60,61,1,0,0,0,61,22,1,0,0,0,62,60,1,0,0,0,63,64,7,2,0,0,64,
		24,1,0,0,0,65,69,7,3,0,0,66,68,7,3,0,0,67,66,1,0,0,0,68,71,1,0,0,0,69,
		67,1,0,0,0,69,70,1,0,0,0,70,26,1,0,0,0,71,69,1,0,0,0,72,73,7,4,0,0,73,
		74,1,0,0,0,74,75,6,13,0,0,75,28,1,0,0,0,4,0,51,60,69,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
